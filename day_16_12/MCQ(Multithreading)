1.	What is the output of the following code
public class MultiThread implements Runnable
{
	public static void main(String[] args) throws InterruptedException {
		Thread thread = new Thread(new MultiThread());
		thread.start();
		System.out.print("nit ");
		thread.join();
		System.out.println("google ");
	}
	@Override
	public void run() {
		System.out.println("NareshIT");
	}
}

OUTPUT:=>
nit NareshIT
google 
________________________________________________________________________________________
2.	What is the output of the following code
class Test extends Thread
{
	@Override
	public void run() {
		System.out.println("Run");
		super.run();
	}
	
	@Override
	public synchronized void start() {
		System.out.println("Start");
		super.start();
	}	
}
public class MultiThread
{
	public static void main(String[] args) {
		nit();
	}
	
	static public void nit() {
		Test test = new Test();
		test.start();
	}
}

OUTPUT:=>
Start
Run
_______________________________________________________________________________________
3.	What is the output of the following code
class Test extends Thread
{
	int a;
	public void run() {
		a++;
	}
}
public class MultiThread
{
	public static void main(String[] args) {
		Test test = new Test();
		test.run();
		System.out.println(test.a);
		test.start();
		System.out.println(test.a);
		System.out.println(test.isAlive());
		System.out.println(test.getName());		
	}
}

OUTPUT:=>
1
1
true
Thread-0
_______________________________________________________________________________________
4.	What is the output of the following code
public class MultiThread extends Thread
{
	public void run() {
		System.out.println(Thread.currentThread().getId());
	}
	public static void main(String[] args) {
		MultiThread nit = new MultiThread();
		for(int i=0;i<10;i++)
		{
			nit.start();
		}
	}
}

OUTPUT:=>
15
Exception in thread "main" java.lang.IllegalThreadStateException
	at java.base/java.lang.Thread.start(Thread.java:793)
	at CoreJavaPrograms/day_16_12.MultiThread.main(MultiThread.java:12)
(we cant rebirth  the thread)
_______________________________________________________________________________________
5.	What is the output of the following code
public class MultiThread extends Thread
{
	public void run() {
		System.out.print(Thread.currentThread().getId()+" ");
	}
	public static void main(String[] args) {
		for(int i=0;i<10;i++)
		{
			MultiThread nit = new MultiThread();
			nit.start();
		}
	}
}

OUTPUT:=>
23 21 18 19 17 24 16 20 15 22 
_______________________________________________________________________________________
6.	What is the output of the following code
public class MultiThread extends Thread
{
	public void run() {
		System.out.print(Thread.currentThread().getId()+" ");
	}
	
	@Override
	public void start() {
		System.out.print(Thread.currentThread().getName()+" ");
	}
	
	public static void main(String[] args) {
		MultiThread nit = new MultiThread();
		for(int i=0;i<10;i++)
		{
			nit.start();
		}
	}
}

OUTPUT:=>
main main main main main main main main main main 
_______________________________________________________________________________________
7.	What is the output of the following code
public class MultiThread extends Thread
{
	public void run() {
		System.out.print(Thread.currentThread().getId()+" ");
	}
	
	@Override
	public void start() {
		System.out.print(Thread.currentThread().getName()+" ");
	}
	
	public static void main(String[] args) {
		MultiThread nit = new MultiThread();
		for(int i=0;i<10;i++)
		{
			nit.run();
		}
	}
}

OUTPUT:=> 1 1 1 1 1 1 1 1 1 1 
_______________________________________________________________________________________
8.	What is the output of the following program
public class MultiThread implements Runnable
{
	Thread thread;
	public MultiThread() {
		thread = new Thread(this);
		thread.start();
	}
	public void run() {
		System.out.println(thread); {here,  thread is a obj reference)
		
	}	
	public static void main(String[] args) {
		new MultiThread();
	}
}

OUTPUT:=>Thread[Thread-0,5,main]
_______________________________________________________________________________________
9.	What is the output of the following program
public class MultiThread implements Runnable
{
	Thread thread;
	public MultiThread() {
		thread = new Thread(this,"NareshIT");
		thread.setPriority(6);
		thread.start();
	}
	public void run() {
		System.out.println(thread);
		
	}
	public static void main(String[] args) {
		new MultiThread();
	}
}

OUTPUT:=>Thread[NareshIT,6,main]
_______________________________________________________________________________________
10.	What is the output of the following program
public class MultiThread extends Thread
{	
	public static void main(String[] args) {
		MultiThread m1 = new MultiThread();
		MultiThread m2 = new MultiThread();
		MultiThread m3 = new MultiThread();
		m1.start();
		m2.start();
		m3.start();
	}
	
public void run() {
		System.out.println(Thread.currentThread().getName());
	}
}

OUTPUT:=>
Thread-2
Thread-0
Thread-1
(changing)
_______________________________________________________________________________________
11.	What is the output of the following program
public class MultiThread extends Thread
{	
	public static void main(String[] args) {
		MultiThread m1 = new MultiThread();
		MultiThread m2 = new MultiThread();
		MultiThread m3 = new MultiThread();
		m1.start();
		m2.start();
		m3.start();
		
		for(int i=0;i<5;i++) 
		{
			m2.yield();
			System.out.println(Thread.currentThread().getName());
		}
	}
public void run() {
		System.out.println(Thread.currentThread().getName());
	}
}

OUTPUT:=>
main
main
main
main
main
Thread-1
Thread-2
Thread-0
_______________________________________________________________________________________
12.	What is the output of the following code
class Test implements Runnable
{
	@Override
	public void run() {
		Thread thread = Thread.currentThread();
		System.out.println(thread.getState());
	}
}
public class MultiThread
{
	public static void main(String[] args) {
		Test nit = new Test();
		nit.run();
	}
}

OUTPUT:=>RUNNABLE
_______________________________________________________________________________________
13.	What is the output of the following snippet
class Test implements Runnable
{
	@Override
	public void run() {
		Thread thread = Thread.currentThread();
		thread.stop();
		System.out.println(thread.getState());
	}
}
public class MultiThread
{
	public static void main(String[] args) {
		Test nit = new Test();
		nit.run();
	}
}

OUTPUT:=>
_______________________________________________________________________________________
14.	What is the output of the following code
class Test implements Runnable
{
	public void run() {
		Thread thread = Thread.currentThread();
		Thread nit = thread.currentThread();
		System.out.println(nit.getName());		
	}
}
public class MultiThread
{
	public static void main(String[] args) {
		Test nit = new Test();
		Thread thread = new Thread(nit);
	}
}

OUTPUT:=>compile successfully.
_______________________________________________________________________________________
15.	What is the output of the following code
class Test implements Runnable
{
	public void run() {
		Thread thread = Thread.currentThread();
		Thread nit = thread.currentThread();
		System.out.println(nit.getName());			
	}
}
public class MultiThread
{
	public static void main(String[] args) {
		Test nit = new Test();
		Thread thread = new Thread(nit);
		thread.start();
	}
}

OUTPUT:=>Thread-0
_______________________________________________________________________________________
16.	What is the output of the following code
class Test implements Runnable
{
	public void run() {
		Thread thread = Thread.currentThread();
		Thread nit = thread.currentThread();
		System.out.println(nit.getName());
				
	}
}
public class MultiThread
{
	public static void main(String[] args) {
		Test nit = new Test();
		Thread thread = new Thread(nit);
		thread.setName("NareshIT");
		thread.start();
	}
}

OUTPUT:=>NareshIT
_______________________________________________________________________________________
17.	What is the output of the following snippet
public class MultiThread 
{
	public static void main(String[] args) {
		Thread nit = new Thread();
		System.out.println(nit.MIN_PRIORITY+" "+nit.MAX_PRIORITY+" "+nit.NORM_PRIORITY);
	}
}

OUTPUT:=>1 10 5
________________________________________________________________________________________
18.	What is the output of the following snippet
public class MultiThread 
{
	public static void main(String[] args) {
		Thread nit = new Thread();
		System.out.println(nit.MIN_PRIORITY+nit.MAX_PRIORITY+nit.NORM_PRIORITY);
	}
}

OUTPUT:=>16
_______________________________________________________________________________________
19) class Test implements Runnable
{
	public void run()
	{{
		for(int i=0; i<2; i++)
		System.out.println(Thread.currentThread().getName()+" ");
	}
	System.out.println();
}}
class Test20
{
	public static void main(String[] args) 
	{
		Test t = new Test();
		Thread t1 = new Thread();
		Thread t2 = new Thread(t,"J2EE");
o		Thread t3 = new Thread(t,"J2ME");
		t1.start();t2.start();t3.start();

	}
}

OUTPUT:=>
J2ME 
J2ME 
J2EE 
J2EE 
(changing)

_______________________________________________________________________________________
20)public class Test27 extends Thread
{
	public static void main(String[] args) 
	{
		try
		{
			Thread t= new Thread(new Test27 (),"Rahul");
			Thread t1= new Thread(new Test27(),"Ravi");
			t.start(); t1.start();
		}
		catch (Exception e)
		{
			System.out.println("e");
		}
	}
	public void run()
	{
		for(int i=0; i<2; i++)
		{
			try
			{
				Thread.sleep(500);
			}
			catch (Exception e)
			{
				System.out.println("e2");
			}
			System.out.println(Thread.currentThread().getName()+" ");

		}
	}
}

OUTPUT:=>
Rahul 
Ravi 
Rahul 
Ravi 

_______________________________________________________________________________________