Find the output of the following code

Q1)
class Test extends Thread
{
	public void run()
	{
		for(int i=0; i<=10; i++)
		{
			System.out.println("Hello Welcome here.."+i);
		}
	}
}
class Test1 
{
	public static void main(String[] args) 
	{
		Test t = new Test();
		t.start();
		t.start();
	}
}

OUTPUT:=>Exception in thread "main" java.lang.IllegalThreadStateException
	at java.base/java.lang.Thread.start(Thread.java:793)
	at CoreJavaPrograms/day_12_12.MultithreadTest.main(MultithreadTest.java:20)
Hello Welcome here..0
Hello Welcome here..1
Hello Welcome here..2
Hello Welcome here..3
Hello Welcome here..4
Hello Welcome here..5
Hello Welcome here..6
Hello Welcome here..7
Hello Welcome here..8
Hello Welcome here..9
Hello Welcome here..10

NOTE:=>with one object we can call only one start method, if we want to call one more 
======= start method then create one more object reference.
         ex:=> Test t = new Test();
		t.start();
		Test t1 = new Test();
		t1.start();

________________________________________________________________________________________
Q2)
class Test
{
    public static void main(String []args)
    {
        Thread t = Thread.currentThread();
		System.out.println(t);
        System.out.println("Name of thread  : "+t.getName());
		System.out.println("Id of thread  : "+t.getId());

    } 
}

OUTPUT:=>
Thread[main,5,main]
Name of thread  : main
Id of thread  : 1

________________________________________________________________________________________
Q3) 
class Test
	{
 public static void main(String args[])
	{
    new Thread()
	{
    public void run()
	{
      System.out.println("task one");
    }
    }.start();

  new Thread()
  {
    public void run()
	{
      System.out.println("task two");
    }
  }.start();
  
 }
}

OUTPUT:=>
task one
task two

________________________________________________________________________________________
Q4)
class Test
	{
 public static void main(String args[])
	{
  Runnable r1=new Runnable()
  {
    public void run()
	{
      System.out.println("task one");
    }
  };

  Runnable r2=new Runnable()
  {
    public void run()
	{
      System.out.println("task two");
    }
  };
    
  Thread t1=new Thread(r1);
  Thread t2=new Thread(r2);

  t1.start();
  t2.start();
 }
}


OUTPUT:=>
task one
task two
________________________________________________________________________________________
Q5)
class SimpleThread extends Thread 
{
   public SimpleThread(String str) 
	{
	super(str);
    }
    public void run() 
	{
	for (int i = 0; i < 10; i++) 
	{
	System.out.println(i + " " + getName());
    try 
	{
	sleep((int)(Math.random() * 1000));
	}
	catch (InterruptedException e) {}
	}
	System.out.println("DONE! " + getName());
    }
}
class Test
{
public static void main (String args[]) 
    {
        new SimpleThread("J2EE").start();
        new SimpleThread("J2ME").start();
    }
}

OUTPUT:=>
0 J2EE
0 J2ME
1 J2ME
1 J2EE
2 J2EE
2 J2ME
3 J2EE
4 J2EE
3 J2ME
4 J2ME
5 J2EE
5 J2ME
6 J2ME
6 J2EE
7 J2ME
8 J2ME
9 J2ME
7 J2EE
DONE! J2ME
8 J2EE
9 J2EE
DONE! J2EE
________________________________________________________________________________________
Q6)

import java.io.*;
import java.util.*;
class Prime extends Thread
{
	public void run()
	{
		try
		{
			for(int i=1;i<=10;i++)
			{
				if(i==2||i==3||i==5||i==7)
				{
					System.out.println ("Prime No.= "+i);
				}
				Thread.sleep(500);
			}
		}
		catch (Exception e){}
	}
}
class NotPrime extends Thread
{
	public void run()
	{
		try
		{
			for(int i=1;i<=10;i++)
			{
				if(i==4||i==6||i==8||i==9||i==10)
				{
					System.out.println ("Non-Prime No.= "+i);
				}
				Thread.sleep(500);
			}
		}
		catch (Exception e){}
	}
}
class Test
{
	public static void main(String args[])
	{
		new Prime().start();
		new NotPrime().start();
	}
}	

OUTPUT:=>
Prime No.= 2
Prime No.= 3
Non-Prime No.= 4
Prime No.= 5
Non-Prime No.= 6
Prime No.= 7
Non-Prime No.= 8
Non-Prime No.= 9
Non-Prime No.= 10

________________________________________________________________________________________
Q7)
public class Test21 extends Thread
{
	static Thread t;
	public static void main(String [] args)
	{
		try
		{
			t=new Thread(new Test21(),"Ravi");
			t.start();
		}
		catch (Exception e)
		{
			System.out.println(e);
		}
	}
	public void run()
	{
		for(int i=1; i<5; i++)
		{
			try
			{
				System.out.print(Thread.currentThread().getName()+"");
				t.start();
			}
			catch (Exception e)
			{
				System.out.println(" will not botther about but "+e+" happened "+i+" times");
			}
		}
	}
}

OUTPUT:=>
Ravi will not botther about but java.lang.IllegalThreadStateException happened 1 times
Ravi will not botther about but java.lang.IllegalThreadStateException happened 2 times
Ravi will not botther about but java.lang.IllegalThreadStateException happened 3 times
Ravi will not botther about but java.lang.IllegalThreadStateException happened 4 times

________________________________________________________________________________________
Q8)

class Test22 
{
	public static void main(String[] args) 
	{		
		try
		{
			Horse h = new Horse();
			Thread t1= new Thread(h,"MyHorse");
			Thread t2= new Thread(h,"YourHorse");
			new Test22().go(t2);
			t1.start(); t2.start();
		}
		catch (Exception e)
		{
			System.out.println(e);
		}

		void go(Thread t)
		{
			t.start();
		}		
	}
	
}
class Horse implements Runnable
{
	public void run()
	{
		System.out.println(Thread.currentThread().getName()+" ");
	}
}


OUTPUT:=>NOTE:=>without closing main method we can't write another method inside the main 
method thats why this program showing erroe.

Exception in thread "main" java.lang.Error: Unresolved compilation problems: 
	The method go(Thread) is undefined for the type MultithreadTest
	Syntax error on token "void", record expected
	void is an invalid type for the variable go
	Syntax error on token "start", Identifier expected after this token

	at CoreJavaPrograms/day_12_12.MultithreadTest.main(MultithreadTest.java:14)
________________________________________________________________________________________
Q9)

class Test23 
{
	public static void main(String[] args) 
	{
		try
		{
			Horse h = new Horse();
			Thread t1= new Thread(h,"MyHorse");
			Thread t2= new Thread(h,"YourHorse");
			new Test23().go(t2);
			t1.start(); t2.start();
		}
		catch (Exception e)
		{
			System.out.println(e);
		}
	}
	
		void go(Thread t)
		{
			t.start();
		}
	
	
}
class Horse implements Runnable
{
	public void run()
	{
		System.out.println(Thread.currentThread().getName()+" ");
	}
}

OUTPUT:=>
java.lang.IllegalThreadStateException
MyHorse 
YourHorse 
________________________________________________________________________________________
Q10)

class Parrot implements Runnable
{
	public void run()
	{
		System.out.println(Thread.currentThread().getName()+" ");
	}
}
class Test26
{
	static Parrot p;

	static { p=new Parrot();}

	{Thread t1= new Thread(p,"Peacock"); t1.start();}

	public static void main(String [] args)
	{
		new Test26();

		new Thread( new Runnable()
		{
			public void run()
			{
				;
			}
		},"Koyal").start();

		new Thread(new Parrot(),"Parrot").start();
	}
	

	{
	  Thread t2 = new Thread(p,"Sparrow");t2.start();
	}

	}

OUTPUT:=>
Peacock 
Sparrow 
Parrot 
(changing)
________________________________________________________________________________________
Q11)
class MyThreadA extends Thread
{
	String s;
	public void run(String s) 
	{ 
		this.s=s;
		for (;;) 
		{
			System.out.println("s will be printed :"+s);
		}
	}
}
class MyThreadB extends Thread 
{
	String t;
	public void run(String t) 
	{ 
		this.t=t;
		for (;;) 
		{
			System.out.println("t will be printed :"+t);
		}
	}
}
public class Test31
{
public static void main(String [] args) 
{
  MyThreadA t1 = new MyThreadA();
  MyThreadB t2 = new MyThreadB();
		t1.start();
		t2.start();
		
	}
}


OUTPUT:=>Compile 
________________________________________________________________________________________
Q12)
public class Test44 extends Thread
{
public static void main(String argv[])
{
Test44 b = new Test44();
b.run();
b.start();
} 
public void start()
{
for (int i = 0; i < 10; i++)
{
System.out.println("Value of i = " + i); 
}  
}
}

OUTPUT:=>
Value of i = 0
Value of i = 1
Value of i = 2
Value of i = 3
Value of i = 4
Value of i = 5
Value of i = 6
Value of i = 7
Value of i = 8
Value of i = 9
________________________________________________________________________________________
Q13)
class Test58 
{
	public static void main(String[] args) 
	{
		
	}
	System.out.println("Hello World!");
}

OUTPUT:=>Compilation error
________________________________________________________________________________________
Q14)
class Test61
{
public static void main(String[] args) 
{
Runnable r1 = new Runnable() 
{
public void run() 
{
try 
{
while (true) 
{
System.out.println("Hello, world!");
Thread.sleep(1000);
}
} 
catch (InterruptedException iex) {}
}
};

Runnable r2 = new Runnable() 
{
public void run() 
{
try
{
while (true) 
{
System.out.println("Goodbye, " +" Beautiful world!");
Thread.sleep(2000);
}
} 
catch (InterruptedException iex) {}
}
};

Thread thr1 = new Thread(r1);
Thread thr2 = new Thread(r2);
thr1.start();
thr2.start();
}
}

OUTPUT:=>
Hello, world!
Goodbye,  Beautiful world!
Hello, world!
Hello, world!
Goodbye,  Beautiful world!
Hello, world!
Hello, world!
Goodbye,  Beautiful world!
Hello, world!
Hello, world!
Goodbye,  Beautiful world!
Hello, world!
Hello, world!
Goodbye,  Beautiful world!
Hello, world!
(loop will not stoped).
________________________________________________________________________________________
Q15)
class Test4
{
   public static void main(String []argv)
   {
      Thread t = Thread.currentThread();
      System.out.println("Name of current thead : "+t.getName());
      t.setName("First Thread");
      System.out.println("Name of thread after change : "+t.getName());
   } 
}

OUTPUT:=>
Name of current thead : main
Name of thread after change : First Thread
________________________________________________________________________________________
Q16)
class Test15 extends Thread
{
public void run()
{
System.out.println("PRINT ME");
}
public static void main(String []str)
{
try
{
for(int i=0;i<9;i++)
{
System.out.println(i);
Thread.sleep(500);
}
}
catch(InterruptedException e)
{
System.out.println("thread exception");
}
Thread t=new Thread();
t.start();
}
}

OUTPUT:=>
0
1
2
3
4
5
6
7
8
_____________________________________________________________________________________
Q17)
class Foo implements Runnable
{
public void run() 
{
for(int i=0;i<3;i++)
System.out.println("Run by..."+Thread.currentThread().getName()+",i Is "+ i);
}
public void run(String name)
{
System.out.println("This is Second"+name);
}
}
public class Test18
{
public static void main(String args [])
{
Foo f = new Foo();
Thread t = new Thread(f);
try 
{
System.out.println("Number Will be printt After 500 MiliSecond..");
for(int j=0;j<5;j++)
{
System.out.println("This is j..."+j);
t.sleep(500);
}
}
catch(InterruptedException e) 
{
System.out.println("InterruptedException.."+ e);
e.printStackTrace();
}
}
}

OUTPUT:=>
Number Will be printt After 500 MiliSecond..
This is j...0
This is j...1
This is j...2
This is j...3
This is j...4

________________________________________________________________________________________
Q18)
public class Test28 extends Thread
{
	public static void main(String [] args)
	{
		System.out.println(Thread.currentThread().getId()+" ");
		Thread t1 = new Thread(new Test28(),"Rahul");
		Thread t2 = new Thread(new Test28(),"Ravi");
		Thread t3 = new Thread(new Test28(),"Puja");
		t3.start();
		t1.start();
		t2.run();
		t2.start();
	}
	public  void run()
	{
		    for(int i=0; i<2; i++)
			System.out.println(Thread.currentThread().getName()+" I'm :"+i);
			System.out.println("It is end of loop");
	}
}

OUTPUT:=>
_____1 
Puja I'm :0
Rahul I'm :0
main I'm :0
Rahul I'm :1
Puja I'm :1
It is end of loop
It is end of loop
main I'm :1
It is end of loop
Ravi I'm :0
Ravi I'm :1
It is end of loop
___________________________________________________________________________________
Q19)

class MyThread extends Thread 
{
public void run() 
{
		for (int i=0; i < 10; i++) 
		{
			System.out.println("hello world1");
		}
	}
}
public class Test36
{
public static void main(String [] args) 
{
MyThread t1 = new MyThread();
t1.start();
try 
{
t1.join(); 
} 
catch (InterruptedException e) 
{
System.out.println("ERROR: Thread was interrupted");
}       
System.out.println("Thread is done!");
	}
}

OUTPUT:=>
________________________________________________________________________________________
Q20)
public class JoinDemo1 
{
	public static void main(String[] args) throws InterruptedException 
	{
		System.out.println("Main thread started");
		Thread thread = Thread.currentThread();
		String name = thread.getName();
		
		for(int i=1; i<=5; i++)
		{			
			System.out.println(i + " by "+name+ " thread ");
			Thread.sleep(1000);
			thread.join(); 
		}		
		System.out.println("Main thread ended");
	}

}


OUTPUT:=>